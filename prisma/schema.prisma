// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  image             String?
  username          String              @unique
  role              String              @default("user")
  accounts          Account[]
  sessions          Session[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  profile           Profile?
  socialLink        SocialLink?
  challenge         Challenge[]
  quiz              Quiz[]
  quizAttempt       QuizAttempt[]
  quizQuestions     QuizQuestion[]
  challengeSolution ChallengeSolution[]
  comments          Comment[]
  commentLikes      CommentLike[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Profile {
  id           String  @id @default(uuid())
  userId       String  @unique
  title        String? @db.VarChar(255)
  bio          String?
  website      String?
  profileImage String?
  resume       String? @unique
  user         User    @relation(fields: [userId], references: [id])
}

model SocialLink {
  id         String  @id @default(uuid())
  userId     String  @unique
  github     String?
  twitter    String?
  instagram  String?
  youtube    String?
  medium     String?
  threads    String?
  leetcode   String?
  gfg        String?
  codechef   String?
  codeforces String?
  linkedIn   String?
  user       User    @relation(fields: [userId], references: [id])
}

model Challenge {
  id                  String              @id @default(uuid())
  userId              String
  creatorId           String
  title               String
  slug                String              @unique
  challengeCategoryId String?
  description         String?
  about               String?
  challengeTechId     String?
  publish             Boolean             @default(false)
  user                User                @relation(fields: [userId], references: [id])
  challengeCategory   ChallengeCategory?  @relation(fields: [challengeCategoryId], references: [id])
  challengeTech       ChallengeTech?      @relation(fields: [challengeTechId], references: [id])
  figmaDesktop        String?
  figmaMobile         String?
  image               String?
  resource            String?
  authorName          String?
  authorProfile       String?
  challengeSolution   ChallengeSolution[]
}

model ChallengeSolution {
  id          String    @id @default(uuid())
  challengeId String
  userId      String
  slug        String    @unique
  htmlContent String
  cssContent  String
  jsContent   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  status      Boolean   @default(false)
  comments    Comment[]

  @@index([challengeId])
  @@index([userId])
}

model Comment {
  id                    String            @id @default(uuid())
  challengeSolutionSlug String
  userId                String
  content               String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  challengeSolution     ChallengeSolution @relation(fields: [challengeSolutionSlug], references: [slug], onDelete: Cascade)
  user                  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes                 CommentLike[]

  @@index([challengeSolutionSlug])
  @@index([userId])
}

model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId]) // Ensures a user can like a comment only once
  @@index([commentId])
  @@index([userId])
}

model ChallengeCategory {
  id         String      @id @default(uuid())
  name       String
  score      Int
  challenges Challenge[]
}

model ChallengeTech {
  id         String      @id @default(uuid())
  name       String
  challenges Challenge[]
}

model Quiz {
  id             String         @id @default(uuid())
  title          String
  description    String?
  creatorId      String
  duration       Int?
  quizCategoryId String?
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  isPublished    Boolean        @default(false)
  questions      QuizQuestion[]
  user           User           @relation(fields: [creatorId], references: [id])
  quizAttempts   QuizAttempt[]
  quizCategory   QuizCategory?  @relation(fields: [quizCategoryId], references: [id])
  tags           QuizToTag[] // Many-to-many relationship with QuizTag through QuizToTag
}

model QuizQuestion {
  id        String          @id @default(uuid())
  text      String
  quiz      Quiz            @relation(fields: [quizId], references: [id])
  quizId    String
  creatorId String
  user      User            @relation(fields: [creatorId], references: [id])
  options   QuizOption[]
  score     Int?
  position  Int?
  tags      QuestionToTag[] // Many-to-many relationship with QuizTag through QuestionToTag
}

model QuizOption {
  id         String       @id @default(uuid())
  text       String
  isCorrect  Boolean
  question   QuizQuestion @relation(fields: [questionId], references: [id])
  questionId String
}

model QuizAttempt {
  id          String    @id @default(uuid())
  student     User      @relation(fields: [studentId], references: [id])
  studentId   String
  quiz        Quiz      @relation(fields: [quizId], references: [id])
  quizId      String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int?
}

model QuizCategory {
  id      String @id @default(uuid())
  name    String @unique
  quizzes Quiz[]
}

model QuizTag {
  id        String          @id @default(uuid())
  name      String          @unique
  quizzes   QuizToTag[] // Many-to-many relationship with Quiz through QuizToTag
  questions QuestionToTag[] // Many-to-many relationship with Question through QuestionToTag
}

model QuizToTag {
  quizId String
  tagId  String

  quiz Quiz    @relation(fields: [quizId], references: [id])
  tag  QuizTag @relation(fields: [tagId], references: [id])

  @@id([quizId, tagId])
}

model QuestionToTag {
  questionId String
  tagId      String

  question QuizQuestion @relation(fields: [questionId], references: [id])
  tag      QuizTag      @relation(fields: [tagId], references: [id])

  @@id([questionId, tagId])
}
