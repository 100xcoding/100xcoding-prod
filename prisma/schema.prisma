// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  username      String      @unique
  role          String      @default("user")
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile       Profile?
  socialLink    SocialLink?
  challenge     Challenge[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Profile {
  id           String  @id @default(uuid())
  userId       String  @unique
  title        String?
  bio          String?
  website      String?
  profileImage String?
  resume       String? @unique
  user         User    @relation(fields: [userId], references: [id])
}

model SocialLink {
  id         String  @id @default(uuid())
  userId     String  @unique
  github     String?
  twitter    String?
  instagram  String?
  youtube    String?
  medium     String?
  threads    String?
  leetcode   String?
  gfg        String?
  codechef   String?
  codeforces String?
  linkedIn   String?
  user       User    @relation(fields: [userId], references: [id])
}

model Challenge {
  id                  String             @id @default(uuid())
  userId              String
  creatorId           String
  title               String
  slug                String             @unique
  challengeCategoryId String?
  description         String?
  task                String?
  about               String?
  requirements        String?
  steps               String?
  challengeResourceId String?
  challengeTechId     String?
  publish             Boolean            @default(false)
  user                User               @relation(fields: [userId], references: [id])
  challengeCategory   ChallengeCategory? @relation(fields: [challengeCategoryId], references: [id])
  challengeTech       ChallengeTech?     @relation(fields: [challengeTechId], references: [id])
  // challengeResource   ChallengeResource? @relation(fields: [challengeResourceId], references: [id])
  figmaDesktop        String?
  figmaMobile         String?
  image               String?
  resource            String?
}

model ChallengeCategory {
  id         String      @id @default(uuid())
  name       String
  score      Int
  challenges Challenge[]
}

model ChallengeTech {
  id         String      @id @default(uuid())
  name       String
  challenges Challenge[]
}

model ChallengeResource {
  id   String @id @default(uuid())
  name String
  link String
  type String
  // challenges Challenge[]
}
